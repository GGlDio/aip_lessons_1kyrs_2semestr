#include <GL/glut.h>
#include <array>
#include <cmath>

struct Point{
    float x,y;
};

std::array <Point,100> graph;

void renderScene(void);
void plotAxes();
void plotGraph();
void initGraph();

int main(int argc, char* argv[])
{
    initGraph();
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(600,600);
    glutCreateWindow("OpenGL Start Application");
    glutDisplayFunc(renderScene);
    glutMainLoop();
    return 0;
}


void renderScene(void) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    plotGraph();

    glutSwapBuffers();
}

void plotAxes(){

    glBegin(GL_LINES);
    glColor3f(1,0,0);
    glVertex2f(0,0);
    glVertex2f(3,0);
    glColor3f(0,0,1);
    glVertex2f(0,0);
    glVertex2f(0,3);

    glEnd();
}

void plotGraph(){
    glPushMatrix();
    glScalef(.05,.05,1);
    glTranslatef(0,0,0);
    plotAxes();
    glBegin(GL_LINE_STRIP);
    glColor3f(1,1,1);
    for(int i=0;i<graph.size();i++){
        glVertex2f(graph[i].x,graph[i].y);
    }
    glEnd();
    glPopMatrix();
}

void initGraph(){
    Point p;
    float x=0.0;
    //float xf=2*3.14; //дельтоид, гипоциклоид 1
    //float xf=20*3.14; //гипоциклоид 2
    float xf=10*3.14;
    float h=(xf-x)/graph.size();
    int i=0;
    while(x<xf){
        /*p.x=2*cos(x)+cos(2*x); //дельтоид
        p.y=2*sin(x)-sin(2*x);*/

       /* p.x=20*(cos(x)+cos(5*x)/5); //Гипоциклоид 1
        p.y=20*(sin(x)-sin(5*x)/5);*/

        /*p.x=4.4*(cos(x)+cos(1.1*x)/1.1); //Гипоциклоид 2
        p.y=4.4*(sin(x)-sin(1.1*x)/1.1);*/

        p.x=24.8*(cos(x)+cos(6.2*x)/6.2); //Гипоциклоид 3
        p.y=24.8*(sin(x)-sin(6.2*x)/6.2);
        graph[i]=p;
        x=x+h;
        i++;
    }
}
